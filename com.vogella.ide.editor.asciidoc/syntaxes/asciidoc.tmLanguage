<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>asciidoc</string>
	</array>
	<key>keyEquivalent</key>
	<string>^~A</string>
	<key>name</key>
	<string>AsciiDoc</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#lists</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#blocks</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#titles</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#lines</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#inline</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#characters</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>blocks</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#literal_block_announced</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal_block_delimited</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#listing_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#sidebar_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#passthrough_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#quote_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#example_block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#open_block</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>comment_block</key>
				<dict>
					<key>begin</key>
					<string>^(/{4,})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>comment block; note the big surprise that macros are enabled here</string>
					<key>contentName</key>
					<string>meta.block.comment.content.asciidoc</string>
					<key>end</key>
					<string>^(/{4,})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#macro</string>
						</dict>
					</array>
				</dict>
				<key>example_block</key>
				<dict>
					<key>begin</key>
					<string>^(={4,5})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.example.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>might need to add more includes but these are the ones that arise in practice for me; note restriction to 4 or 5 to distinguish from level 0 setext</string>
					<key>contentName</key>
					<string>meta.block.example.content.asciidoc</string>
					<key>end</key>
					<string>^(={4,5})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.example.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.unquoted.block.example.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#lists</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#listing_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#lines</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#inline</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#characters</string>
						</dict>
					</array>
				</dict>
				<key>listing_block</key>
				<dict>
					<key>begin</key>
					<string>^(\-{4,5})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.listing.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>declare content as source in order to get any extra yummy source goodness</string>
					<key>contentName</key>
					<string>source.block.listing.content.asciidoc</string>
					<key>end</key>
					<string>^(\-{4,5})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.listing.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.block.listing.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#callout</string>
						</dict>
					</array>
				</dict>
				<key>literal_block_announced</key>
				<dict>
					<key>begin</key>
					<string>^((\[)"?literal\"?,?.*(\]))\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attributelistline.begin.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attributelistline.end.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>section template announced as literal, starts literal block</string>
					<key>contentName</key>
					<string>meta.block.literal.content.asciidoc</string>
					<key>end</key>
					<string>(?=^\s*$)</string>
					<key>name</key>
					<string>string.literal.block.announced.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#callout</string>
						</dict>
					</array>
				</dict>
				<key>literal_block_delimited</key>
				<dict>
					<key>begin</key>
					<string>^(\.{4,})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.literal.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>alternate way to get literal block, delimit with 4 or more periods</string>
					<key>contentName</key>
					<string>meta.block.literal.content.asciidoc</string>
					<key>end</key>
					<string>^(\.{4,})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.literal.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.literal.block.delimited.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#callout</string>
						</dict>
					</array>
				</dict>
				<key>open_block</key>
				<dict>
					<key>begin</key>
					<string>^(\-\-)\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.open.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>might need to check on these includes</string>
					<key>contentName</key>
					<string>meta.block.open.content.asciidoc</string>
					<key>end</key>
					<string>^(\-\-)\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.open.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.block.open.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#lists</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#listing_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#passthrough_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#lines</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#inline</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#characters</string>
						</dict>
					</array>
				</dict>
				<key>passthrough_block</key>
				<dict>
					<key>begin</key>
					<string>^(\+{4,5})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.passthrough.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>must be four or five to distinguish from level 4 setext</string>
					<key>contentName</key>
					<string>text.xml.block.passthrough.content.asciidoc</string>
					<key>end</key>
					<string>^(\+{4,5})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.passthrough.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>meta.embedded.block.passthrough.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>text.xml</string>
						</dict>
					</array>
				</dict>
				<key>quote_block</key>
				<dict>
					<key>begin</key>
					<string>^(_{4,})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.quote.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>might need to add more includes, but these are the ones that arise for me in practice</string>
					<key>contentName</key>
					<string>meta.block.quote.content.asciidoc</string>
					<key>end</key>
					<string>^(_{4,})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.quote.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>markup.quote.block.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#lines</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#inline</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#characters</string>
						</dict>
					</array>
				</dict>
				<key>sidebar_block</key>
				<dict>
					<key>begin</key>
					<string>^(\*{4,})\s*$\n?</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.sidebar.begin.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>might need to add more includes but these are the ones that arise in practice for me</string>
					<key>contentName</key>
					<string>meta.block.sidebar.content.asciidoc</string>
					<key>end</key>
					<string>^(\*{4,})\s*$\n?</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>constant.delimiter.block.sidebar.end.asciidoc</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.block.sidebar.asciidoc</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#lists</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#comment_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#listing_block</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#lines</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#inline</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#characters</string>
						</dict>
					</array>
				</dict>
			</dict>
		</dict>
		<key>callout</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.callout.begin.asciidoc</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.definition.callout.end.asciidoc</string>
				</dict>
			</dict>
			<key>comment</key>
			<string>has to be alone in repository (not in a group), as it operates in only a couple of highly specific places</string>
			<key>match</key>
			<string>(?&lt;!\\)(&lt;)\d+(&gt;)</string>
			<key>name</key>
			<string>constant.other.callout.asciidoc</string>
		</dict>
		<key>characters</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#entity</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#xmlentity</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#escape</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#replacement</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#passmacro</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#macro</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#xref</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#biblio_anchor</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#index3</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#index2</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>biblio_anchor</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.biblioanchor.begin.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.biblioanchor.end.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\[)(\[\[\[).*?(\]\]\])(?!\])</string>
					<key>name</key>
					<string>storage.type.reference.biblioanchor.asciidoc</string>
				</dict>
				<key>entity</key>
				<dict>
					<key>comment</key>
					<string>&amp;#x278a; &amp;#182;</string>
					<key>match</key>
					<string>(?&lt;!\\)&amp;#(x[0-9a-fA-f]{4}|[0-9]{3});</string>
					<key>name</key>
					<string>constant.character.entity.asciidoc</string>
				</dict>
				<key>escape</key>
				<dict>
					<key>comment</key>
					<string>I do not really know if this is a good list, adopted wholesale from original bundle</string>
					<key>match</key>
					<string>\\(?=[-`*_#+.!(){}\[\]\\&gt;:])</string>
					<key>name</key>
					<string>constant.character.escape.asciidoc</string>
				</dict>
				<key>index2</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.indexterm.double.begin.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.character.indexterm.double.end.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\()(\({2})([^\(\s].*?)(\){2})(?!\))</string>
					<key>name</key>
					<string>variable.other.indexterm.double.asciidoc</string>
				</dict>
				<key>index3</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.indexterm.triple.begin.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.character.indexterm.triple.end.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!\()(\({3})([^\(].*?)(\){3})(?!\))</string>
					<key>name</key>
					<string>variable.other.indexterm.triple.asciidoc</string>
				</dict>
				<key>macro</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>markup.underline.link.macro.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>keyword.control.name.macro.asciidoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.character.separator.macro.asciidoc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>markup.underline.target.macro.asciidoc</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>constant.character.attributes.macro.begin.asciidoc</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.attributes.macro.asciidoc</string>
						</dict>
						<key>8</key>
						<dict>
							<key>name</key>
							<string>constant.character.attributes.macro.end.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>there are other macro notations but I match only those that end in square brackets</string>
					<key>match</key>
					<string>(?x)
					(?:
						((?:https?|mailto|ftp|file)	# specify separately so we can mark them as links that TextMate opens
						?:{1}	# inline only
						\S*)	# (others such as image are partial URLs and/or TextMate cannot handle them)
					|
						(([a-zA-Z0-9][a-zA-Z0-9_]*)
						(:{1,2})
						(\S*))
					)
					(?:(\[)([^\]]*)(\]))
					</string>
					<key>name</key>
					<string>meta.macro.asciidoc</string>
				</dict>
				<key>passmacro</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.name.macro.pass.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.character.separator.macro.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>markup.underline.target.macro.asciidoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>constant.character.attributes.macro.begin.asciidoc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.attributes.macro.pass.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>text.xml</string>
								</dict>
							</array>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>constant.character.attributes.macro.end.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
						(pass)
						(:{1,2})
						(\S*)
						(\[)([^\]]*)(\])
					</string>
					<key>name</key>
					<string>meta.macro.pass.asciidoc</string>
				</dict>
				<key>replacement</key>
				<dict>
					<key>comment</key>
					<string>replace me, my sweet replaceable you...</string>
					<key>match</key>
					<string>(?x)
						(?&lt;!\\) # unless I am preceded by an escape, that is...
						(
							\(C\)
							|
							\(TM\)
							|
							\(R\)
							|
							((?&lt;!\-)\-\-(?!\-)) # exactly two, and even this may not rule out all that I want to
							|
							((?&lt;!\.)\.\.\.(?!\.)) # exactly three
							|
							\-&gt;
							|
							&lt;\-
							|
							=&gt;
							|
							&lt;=
						)</string>
					<key>name</key>
					<string>constant.character.replacement.asciidoc</string>
				</dict>
				<key>xmlentity</key>
				<dict>
					<key>comment</key>
					<string>amp, lt, gt</string>
					<key>match</key>
					<string>(?&lt;!\\)&amp;(amp|lt|gt);</string>
					<key>name</key>
					<string>constant.character.entity.xml.asciidoc</string>
				</dict>
				<key>xref</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.xref.begin.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>markup.underline.term.xref.asciidoc</string>
						</dict>
						<key>5</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.xref.asciidoc</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>constant.character.xref.end.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?&lt;!&lt;)(&lt;&lt;)([^,]*?)((,\s*)(.*?))?(&gt;&gt;)(?!&lt;)</string>
					<key>name</key>
					<string>meta.xref.asciidoc</string>
				</dict>
			</dict>
		</dict>
		<key>inline</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#passthru</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_bold</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_italic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_unquoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#double_quote</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_bold</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_italic</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_literal_nopassthru</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#single_unquoted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#superscript</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#subscript</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>double_bold</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bold.double.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bold.double.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.boldinner.double.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with an attribute list
								(?&lt;!\\) # must not be preceded by escape
								(?&lt;delim&gt;\*\*)(?&lt;inner&gt;.*?)(?&lt;closer&gt;\k&lt;delim&gt;) # anything surrounded by double star
							</string>
					<key>name</key>
					<string>markup.bold.double.asciidoc</string>
				</dict>
				<key>double_italic</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.italic.double.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.italic.double.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.italicinner.double.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attribute list
								(?&lt;!\\) # must not be preceded by escape
								(?&lt;delim&gt;__)(?&lt;inner&gt;.*?)(?&lt;closer&gt;\k&lt;delim&gt;) # anything surrounded by double underline
							</string>
					<key>name</key>
					<string>markup.italic.double.asciidoc</string>
				</dict>
				<key>double_literal</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.literal.double.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.literal.double.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.literalinner.double.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attribute list
								(?&lt;!\\) # must not be preceded by escape
								(?&lt;delim&gt;\+\+)(?&lt;inner&gt;.*?)(?&lt;closer&gt;\k&lt;delim&gt;) # anything surrounded by double plus
							</string>
					<key>name</key>
					<string>string.other.literal.double.asciidoc</string>
				</dict>
				<key>double_quote</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.quoted.double.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.quoted.double.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.doublequotedinner.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attribute list
								(?&lt;!\w|\\) # cannot be preceded by word character or escape
								(?&lt;delim&gt;``)(?&lt;inner&gt;(?!\s).*?(?&lt;!\s))(?&lt;closer&gt;'') # double backtick followed by non-space, anything, double-apostrophe preceded by non-space
								(?!\w) # cannot be followed by word character either
							</string>
					<key>name</key>
					<string>string.quoted.double.asciidoc</string>
				</dict>
				<key>double_unquoted</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.unquoted.double.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.unquoted.double.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.unquotedinner.double.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with an attribute list (indeed, that is its purpose)
								(?&lt;!\\) # must not be preceded by escape
								(?&lt;delim&gt;\#\#)(?&lt;inner&gt;.*?)(?&lt;closer&gt;\k&lt;delim&gt;) # anything surrounded by double hashes
							</string>
					<key>name</key>
					<string>string.other.unquoted.double.asciidoc</string>
				</dict>
				<key>passthru</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>constant.character.passthru.begin.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>variable.parameter.passthruinner.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>text.xml</string>
								</dict>
							</array>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>constant.character.passthru.end.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>must be dead first among the inlines, so as to take priority</string>
					<key>match</key>
					<string>(\+\+\+|\$\$)(.*?)(\1)</string>
					<key>name</key>
					<string>meta.passthru.inline.asciidoc</string>
				</dict>
				<key>single_bold</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bold.single.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.bold.single.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.boldinner.single.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with an attributes list
								(?&lt;=^|\W)(?&lt;!\\) # must be preceded by a nonword character, and not by an escape
								(?&lt;delim&gt;\*)(?&lt;inner&gt;(?!\s).*?(?&lt;!\s))(?&lt;closer&gt;\k&lt;delim&gt;) # delimiter *, no space, anything, no space, delimiter...
								(?!\w) # ... and must be followed by nonword character
							</string>
					<key>name</key>
					<string>markup.bold.single.asciidoc</string>
				</dict>
				<key>single_italic</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.italic.single.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.italic.single.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.italicinner.single.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might be preceded by an attributes list
								(?&lt;=^|\W)(?&lt;!\\) # must be preceded by a nonword character, and not by an escape
								(?&lt;delim&gt;_)(?&lt;inner&gt;(?!\s).*?(?&lt;!\s))(?&lt;closer&gt;\k&lt;delim&gt;) # delimiter underscore, nonspace, anything, nonspace, delimiter
								(?!\w) # and must by followed by nonword character
							</string>
					<key>name</key>
					<string>markup.italic.single.asciidoc</string>
				</dict>
				<key>single_literal</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.literal.single.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.literal.single.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.literalinner.single.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attributes list
								(?&lt;=^|\W)(?&lt;!\\) # must be preceded by a nonword character, and not by escape
								(?&lt;delim&gt;\+)(?&lt;inner&gt;(?!\s).*?(?&lt;!\s))(?&lt;closer&gt;\k&lt;delim&gt;) # delimiter plus, nonspace, anything, nonspace, delimiter
								(?!\w) # and must be followed by nonword character
							</string>
					<key>name</key>
					<string>string.other.literal.single.asciidoc</string>
				</dict>
				<key>single_literal_nopassthru</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.literal.single.nopassthru.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.literal.single.nopassthru.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.literalinner.single.nopassthru.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;!\w|\\) # must not be preceded by word character or escape
								(?&lt;delim&gt;`)(?&lt;inner&gt;(?!\s).*?(?&lt;!\s))(?&lt;closer&gt;\k&lt;delim&gt;) # delimiter backtick, nonspace, anything, nonspace, delimiter
								(?!\w) # and must be followed by nonword character
							</string>
					<key>name</key>
					<string>string.other.literal.nopassthru.asciidoc</string>
				</dict>
				<key>single_unquoted</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.unquoted.single.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.unquoted.single.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.unquotedinner.single.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attribute list (darned well better or why are we here)
								(?&lt;=^|\W)(?&lt;!\\) # must be preceded by nonword character, and not by escape
								(?&lt;delim&gt;\#)(?&lt;inner&gt;(?!\s).*?(?&lt;!\s))(?&lt;closer&gt;\k&lt;delim&gt;) # delimiter hash, nonspace, anything, nonspace, delimiter
								(?!\w) # and must be followed by nonword character
							</string>
					<key>name</key>
					<string>string.other.unquoted.single.asciidoc</string>
				</dict>
				<key>subscript</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.subscript.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.subscript.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.subscriptinner.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#superscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attribute list
								(?&lt;!\\) # must not be preceded by escape
								(?&lt;delim&gt;~)(?&lt;inner&gt;.*?)(?&lt;closer&gt;\k&lt;delim&gt;) # twiddle anything twiddle
							</string>
					<key>name</key>
					<string>string.other.subscript.asciidoc</string>
				</dict>
				<key>superscript</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attlist</key>
						<dict>
							<key>name</key>
							<string>support.variable.attributelist.asciidoc</string>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.superscript.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.superscript.begin.asciidoc</string>
						</dict>
						<key>inner</key>
						<dict>
							<key>name</key>
							<string>meta.superscriptinner.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#double_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#double_quote</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_bold</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_italic</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_literal_nopassthru</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#single_unquoted</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#subscript</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
					</dict>
					<key>match</key>
					<string>(?x)
								(?&lt;attlist&gt;\[[^\]]*?\])? # might start with attribute list
								(?&lt;!\\) # no preceding escape
								(?&lt;delim&gt;\^)(?&lt;inner&gt;.*?)(?&lt;closer&gt;\k&lt;delim&gt;) # caret anything caret
							</string>
					<key>name</key>
					<string>string.other.superscript.asciidoc</string>
				</dict>
			</dict>
		</dict>
		<key>lines</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#list_continuation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#linebreak</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#pagebreak</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#ruler</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_heading</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block_id</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#section_template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute_list_line</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#attribute_entry</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>attribute_entry</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>attrname</key>
						<dict>
							<key>name</key>
							<string>support.variable.attribute.asciidoc</string>
						</dict>
						<key>attrvalue</key>
						<dict>
							<key>name</key>
							<string>meta.attributeentry.value.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
						<key>closer</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attributeentry.attrname.end.asciidoc</string>
						</dict>
						<key>delim</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attributeentry.attrname.begin.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(?&lt;attrname&gt;(?&lt;delim&gt;:)(\w[^.]*?)(\.(.*?))?(?&lt;closer&gt;:))(\s+(?&lt;attrvalue&gt;.*))?$\n?</string>
					<key>name</key>
					<string>meta.attributeentry.asciidoc</string>
				</dict>
				<key>attribute_list_line</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attributelistline.begin.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.attributelistline.end.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>Attribute list as paragraph: single brackets. No need for special treatment of escape; follows literal block, section template as being a more general regex</string>
					<key>match</key>
					<string>^(\[)[^\[\]]*(\])\s*$\n?</string>
					<key>name</key>
					<string>support.variable.attributelist.asciidoc</string>
				</dict>
				<key>block_heading</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.blockheading.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>A line beginning with a period and no space</string>
					<key>match</key>
					<string>^(\.)\w.*$\n?</string>
					<key>name</key>
					<string>markup.heading.block.asciidoc</string>
				</dict>
				<key>block_id</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.blockid.begin.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>markup.underline.blockid.id.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.blockid.end.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>A line surrounded by double square brackets</string>
					<key>match</key>
					<string>^(\[\[)([^\[].*)(\]\])\s*$\n?</string>
					<key>name</key>
					<string>meta.tag.blockid.asciidoc</string>
				</dict>
				<key>comment</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.line.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>meta.line.comment.content.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(//)([^/\n].*|)$\n?</string>
					<key>name</key>
					<string>comment.line.double-slash.asciidoc</string>
				</dict>
				<key>linebreak</key>
				<dict>
					<key>match</key>
					<string>(?&lt;=\s)\+$\n?</string>
					<key>name</key>
					<string>constant.linebreak.asciidoc</string>
				</dict>
				<key>list_continuation</key>
				<dict>
					<key>match</key>
					<string>^\+\s*$\n?</string>
					<key>name</key>
					<string>constant.listcontinuation.asciidoc</string>
				</dict>
				<key>pagebreak</key>
				<dict>
					<key>match</key>
					<string>^&lt;{3,}$\n?</string>
					<key>name</key>
					<string>meta.separator.pagebreak.asciidoc</string>
				</dict>
				<key>ruler</key>
				<dict>
					<key>match</key>
					<string>^'{3,}$\n?</string>
					<key>name</key>
					<string>meta.separator.ruler.asciidoc</string>
				</dict>
				<key>section_template</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.sectiontemplate.begin.asciidoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>meta.tag.sectiontemplate.asciidoc</string>
						</dict>
						<key>6</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.sectiontemplate.end.asciidoc</string>
						</dict>
						<key>7</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.sectiontemplate.end.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>fixed list of known template names</string>
					<key>match</key>
					<string>(?x)^
									(\[) # in square brackets
									(template\s*=\s*)?(")? # might start with template-equals and might have template name in quotes
									(
									sect\d|abstract|preface|colophon|dedication|glossary|bibliography|synopsis|appendix|index # fixed list of known templates
									)
									(".*(\])|(\])) # either close the quote (and perhaps go on) and close the bracket, or close the bracket immediately
									\s*$\n?</string>
					<key>name</key>
					<string>variable.parameter.sectiontemplate.asciidoc</string>
				</dict>
			</dict>
		</dict>
		<key>lists</key>
		<dict>
			<key>comment</key>
			<string>My strategy for lists (and similar) is not to try to treat entire paragraphs as lists, but only call out the opening</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#admonition_word</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#bulleted_list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbered_list_dotted</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbered_list_numeric</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#numbered_list_roman</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#labeled_list</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#labeled_list_semicolons</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#callout_list</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>admonition_word</key>
				<dict>
					<key>comment</key>
					<string>NOTE:, TIP:, IMPORTANT:, WARNING: or CAUTION:</string>
					<key>match</key>
					<string>^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):(?=\s+)</string>
					<key>name</key>
					<string>support.constant.admonitionword.asciidoc</string>
				</dict>
				<key>bulleted_list</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.list.bullet.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.list.bullet.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(\s*(\-|\*{1,5}))\s+(?=\w)</string>
					<key>name</key>
					<string>markup.list.bulleted.asciidoc</string>
				</dict>
				<key>callout_list</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.list.callout.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.callout.asciidoc</string>
						</dict>
						<key>3</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.calloutlistnumber.begin.asciidoc</string>
						</dict>
						<key>4</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.calloutlistnumber.end.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(\s*((&lt;)\d+?(&gt;)))\s+(?=\w)</string>
					<key>name</key>
					<string>markup.list.numbered.callout.asciidoc</string>
				</dict>
				<key>labeled_list</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.list.label.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#inline</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.labeledlist.separator.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(.*)(?&lt;!:)(:{2,4})(\s|$\n?)</string>
					<key>name</key>
					<string>markup.list.labeled.asciidoc</string>
				</dict>
				<key>labeled_list_semicolons</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>meta.list.label.asciidoc</string>
							<key>patterns</key>
							<array>
								<dict>
									<key>include</key>
									<string>#inline</string>
								</dict>
								<dict>
									<key>include</key>
									<string>#characters</string>
								</dict>
							</array>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.labeledlist.separator.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^\s*(.*)(?&lt;!;)(;{2})(\s|$\n?)</string>
					<key>name</key>
					<string>markup.list.labeled.semicolons.asciidoc</string>
				</dict>
				<key>numbered_list_dotted</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.list.dotted.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.list.dot.asciidoc</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>The space distinguishes it from a block title</string>
					<key>match</key>
					<string>^(\s*(\.{1,5}))\s+(?=\w)</string>
					<key>name</key>
					<string>markup.list.numbered.dotted.asciidoc</string>
				</dict>
				<key>numbered_list_numeric</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.list.numeric.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.list.number.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(\s*([1-9a-zA-Z][0-9]*\.))\s+(?=\w)</string>
					<key>name</key>
					<string>markup.list.numbered.numeric.asciidoc</string>
				</dict>
				<key>numbered_list_roman</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>string.unquoted.list.roman.asciidoc</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>constant.numeric.list.romannumeral.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(\s*([ivxIVX]+\)))\s+(?=\w)</string>
					<key>name</key>
					<string>markup.list.numbered.roman.asciidoc</string>
				</dict>
			</dict>
		</dict>
		<key>titles</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#setext_title</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#level_title</string>
				</dict>
			</array>
			<key>repository</key>
			<dict>
				<key>level_title</key>
				<dict>
					<key>captures</key>
					<dict>
						<key>eq</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.heading.asciidoc</string>
						</dict>
						<key>title</key>
						<dict>
							<key>name</key>
							<string>entity.name.section.asciidoc</string>
						</dict>
					</dict>
					<key>match</key>
					<string>^(?&lt;eq&gt;={1,5}) (?&lt;title&gt;\w.*)$\n?</string>
					<key>name</key>
					<string>markup.heading.level.${eq/=(?&lt;two&gt;=)?(?&lt;three&gt;=)?(?&lt;four&gt;=)?(?&lt;five&gt;=)?/${five:?4:${four:?3:${three:?2:${two:?1:0}}}}/}.asciidoc</string>
				</dict>
				<key>setext_title</key>
				<dict>
					<key>comment</key>
					<string>Alas, all we can do is mark the second line; TextMate cannot do double-line patterns</string>
					<key>match</key>
					<string>^(=|-|~|\^|\+){6,}\s*$\n?</string>
					<key>name</key>
					<string>markup.heading.setext.n.asciidoc</string>
				</dict>
			</dict>
		</dict>
	</dict>
	<key>uuid</key>
	<string>961C6043-B725-4E2D-83E8-114BF3A7389D</string>
</dict>
</plist>